// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/chaincode.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Confidentiality Levels
type ConfidentialityLevel int32

const (
	ConfidentialityLevel_PUBLIC       ConfidentialityLevel = 0
	ConfidentialityLevel_CONFIDENTIAL ConfidentialityLevel = 1
)

var ConfidentialityLevel_name = map[int32]string{
	0: "PUBLIC",
	1: "CONFIDENTIAL",
}
var ConfidentialityLevel_value = map[string]int32{
	"PUBLIC":       0,
	"CONFIDENTIAL": 1,
}

func (x ConfidentialityLevel) String() string {
	return proto.EnumName(ConfidentialityLevel_name, int32(x))
}
func (ConfidentialityLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ChaincodeSpec_Type int32

const (
	ChaincodeSpec_UNDEFINED ChaincodeSpec_Type = 0
	ChaincodeSpec_GOLANG    ChaincodeSpec_Type = 1
	ChaincodeSpec_NODE      ChaincodeSpec_Type = 2
	ChaincodeSpec_CAR       ChaincodeSpec_Type = 3
	ChaincodeSpec_JAVA      ChaincodeSpec_Type = 4
)

var ChaincodeSpec_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "GOLANG",
	2: "NODE",
	3: "CAR",
	4: "JAVA",
}
var ChaincodeSpec_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"GOLANG":    1,
	"NODE":      2,
	"CAR":       3,
	"JAVA":      4,
}

func (x ChaincodeSpec_Type) String() string {
	return proto.EnumName(ChaincodeSpec_Type_name, int32(x))
}
func (ChaincodeSpec_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2, 0} }

type ChaincodeDeploymentSpec_ExecutionEnvironment int32

const (
	ChaincodeDeploymentSpec_DOCKER ChaincodeDeploymentSpec_ExecutionEnvironment = 0
	ChaincodeDeploymentSpec_SYSTEM ChaincodeDeploymentSpec_ExecutionEnvironment = 1
)

var ChaincodeDeploymentSpec_ExecutionEnvironment_name = map[int32]string{
	0: "DOCKER",
	1: "SYSTEM",
}
var ChaincodeDeploymentSpec_ExecutionEnvironment_value = map[string]int32{
	"DOCKER": 0,
	"SYSTEM": 1,
}

func (x ChaincodeDeploymentSpec_ExecutionEnvironment) String() string {
	return proto.EnumName(ChaincodeDeploymentSpec_ExecutionEnvironment_name, int32(x))
}
func (ChaincodeDeploymentSpec_ExecutionEnvironment) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{3, 0}
}

// ChaincodeID contains the path as specified by the deploy transaction
// that created it as well as the hashCode that is generated by the
// system for the path. From the user level (ie, CLI, REST API and so on)
// deploy transaction is expected to provide the path and other requests
// are expected to provide the hashCode. The other value will be ignored.
// Internally, the structure could contain both values. For instance, the
// hashCode will be set when first generated using the path
type ChaincodeID struct {
	// deploy transaction will use the path
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// all other requests will use the name (really a hashcode) generated by
	// the deploy transaction
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// user friendly version name for the chaincode
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *ChaincodeID) Reset()                    { *m = ChaincodeID{} }
func (m *ChaincodeID) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeID) ProtoMessage()               {}
func (*ChaincodeID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ChaincodeID) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ChaincodeID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChaincodeID) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Carries the chaincode function and its arguments.
// UnmarshalJSON in transaction.go converts the string-based REST/JSON input to
// the []byte-based current ChaincodeInput structure.
type ChaincodeInput struct {
	Args        [][]byte          `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	Decorations map[string][]byte `protobuf:"bytes,2,rep,name=decorations" json:"decorations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChaincodeInput) Reset()                    { *m = ChaincodeInput{} }
func (m *ChaincodeInput) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeInput) ProtoMessage()               {}
func (*ChaincodeInput) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ChaincodeInput) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ChaincodeInput) GetDecorations() map[string][]byte {
	if m != nil {
		return m.Decorations
	}
	return nil
}

// Carries the chaincode specification. This is the actual metadata required for
// defining a chaincode.
type ChaincodeSpec struct {
	Type        ChaincodeSpec_Type `protobuf:"varint,1,opt,name=type,enum=protos.ChaincodeSpec_Type" json:"type,omitempty"`
	ChaincodeId *ChaincodeID       `protobuf:"bytes,2,opt,name=chaincode_id,json=chaincodeId" json:"chaincode_id,omitempty"`
	Input       *ChaincodeInput    `protobuf:"bytes,3,opt,name=input" json:"input,omitempty"`
	Timeout     int32              `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *ChaincodeSpec) Reset()                    { *m = ChaincodeSpec{} }
func (m *ChaincodeSpec) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeSpec) ProtoMessage()               {}
func (*ChaincodeSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ChaincodeSpec) GetType() ChaincodeSpec_Type {
	if m != nil {
		return m.Type
	}
	return ChaincodeSpec_UNDEFINED
}

func (m *ChaincodeSpec) GetChaincodeId() *ChaincodeID {
	if m != nil {
		return m.ChaincodeId
	}
	return nil
}

func (m *ChaincodeSpec) GetInput() *ChaincodeInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ChaincodeSpec) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Specify the deployment of a chaincode.
// TODO: Define `codePackage`.
type ChaincodeDeploymentSpec struct {
	ChaincodeSpec *ChaincodeSpec `protobuf:"bytes,1,opt,name=chaincode_spec,json=chaincodeSpec" json:"chaincode_spec,omitempty"`
	// Controls when the chaincode becomes executable.
	EffectiveDate *google_protobuf1.Timestamp                  `protobuf:"bytes,2,opt,name=effective_date,json=effectiveDate" json:"effective_date,omitempty"`
	CodePackage   []byte                                       `protobuf:"bytes,3,opt,name=code_package,json=codePackage,proto3" json:"code_package,omitempty"`
	ExecEnv       ChaincodeDeploymentSpec_ExecutionEnvironment `protobuf:"varint,4,opt,name=exec_env,json=execEnv,enum=protos.ChaincodeDeploymentSpec_ExecutionEnvironment" json:"exec_env,omitempty"`
}

func (m *ChaincodeDeploymentSpec) Reset()                    { *m = ChaincodeDeploymentSpec{} }
func (m *ChaincodeDeploymentSpec) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeDeploymentSpec) ProtoMessage()               {}
func (*ChaincodeDeploymentSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ChaincodeDeploymentSpec) GetChaincodeSpec() *ChaincodeSpec {
	if m != nil {
		return m.ChaincodeSpec
	}
	return nil
}

func (m *ChaincodeDeploymentSpec) GetEffectiveDate() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EffectiveDate
	}
	return nil
}

func (m *ChaincodeDeploymentSpec) GetCodePackage() []byte {
	if m != nil {
		return m.CodePackage
	}
	return nil
}

func (m *ChaincodeDeploymentSpec) GetExecEnv() ChaincodeDeploymentSpec_ExecutionEnvironment {
	if m != nil {
		return m.ExecEnv
	}
	return ChaincodeDeploymentSpec_DOCKER
}

// Carries the chaincode function and its arguments.
type ChaincodeInvocationSpec struct {
	ChaincodeSpec *ChaincodeSpec `protobuf:"bytes,1,opt,name=chaincode_spec,json=chaincodeSpec" json:"chaincode_spec,omitempty"`
	// This field can contain a user-specified ID generation algorithm
	// If supplied, this will be used to generate a ID
	// If not supplied (left empty), sha256base64 will be used
	// The algorithm consists of two parts:
	//  1, a hash function
	//  2, a decoding used to decode user (string) input to bytes
	// Currently, SHA256 with BASE64 is supported (e.g. idGenerationAlg='sha256base64')
	IdGenerationAlg string `protobuf:"bytes,2,opt,name=id_generation_alg,json=idGenerationAlg" json:"id_generation_alg,omitempty"`
}

func (m *ChaincodeInvocationSpec) Reset()                    { *m = ChaincodeInvocationSpec{} }
func (m *ChaincodeInvocationSpec) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeInvocationSpec) ProtoMessage()               {}
func (*ChaincodeInvocationSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ChaincodeInvocationSpec) GetChaincodeSpec() *ChaincodeSpec {
	if m != nil {
		return m.ChaincodeSpec
	}
	return nil
}

func (m *ChaincodeInvocationSpec) GetIdGenerationAlg() string {
	if m != nil {
		return m.IdGenerationAlg
	}
	return ""
}

func init() {
	proto.RegisterType((*ChaincodeID)(nil), "protos.ChaincodeID")
	proto.RegisterType((*ChaincodeInput)(nil), "protos.ChaincodeInput")
	proto.RegisterType((*ChaincodeSpec)(nil), "protos.ChaincodeSpec")
	proto.RegisterType((*ChaincodeDeploymentSpec)(nil), "protos.ChaincodeDeploymentSpec")
	proto.RegisterType((*ChaincodeInvocationSpec)(nil), "protos.ChaincodeInvocationSpec")
	proto.RegisterEnum("protos.ConfidentialityLevel", ConfidentialityLevel_name, ConfidentialityLevel_value)
	proto.RegisterEnum("protos.ChaincodeSpec_Type", ChaincodeSpec_Type_name, ChaincodeSpec_Type_value)
	proto.RegisterEnum("protos.ChaincodeDeploymentSpec_ExecutionEnvironment", ChaincodeDeploymentSpec_ExecutionEnvironment_name, ChaincodeDeploymentSpec_ExecutionEnvironment_value)
}

func init() { proto.RegisterFile("peer/chaincode.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xda, 0x4a,
	0x14, 0x8d, 0x81, 0x7c, 0x5d, 0x03, 0xcf, 0x6f, 0x1e, 0xef, 0x3d, 0xc4, 0xa6, 0xd4, 0x9b, 0xd2,
	0xa8, 0x32, 0x12, 0x8d, 0xaa, 0xaa, 0xaa, 0x22, 0x11, 0xec, 0x44, 0x6e, 0x29, 0x44, 0x0e, 0xa9,
	0xd4, 0x6e, 0x90, 0xb1, 0x2f, 0x66, 0x14, 0x33, 0x63, 0xd9, 0x83, 0x15, 0xd6, 0xfd, 0x41, 0xfd,
	0x07, 0xfd, 0x6b, 0xad, 0x66, 0x1c, 0x48, 0xd2, 0x64, 0xd9, 0x15, 0x73, 0x0f, 0xe7, 0x7e, 0x9c,
	0x33, 0xd7, 0x03, 0x8d, 0x04, 0x31, 0xed, 0x06, 0x0b, 0x9f, 0xb2, 0x80, 0x87, 0x68, 0x25, 0x29,
	0x17, 0x9c, 0xec, 0xa9, 0x9f, 0xac, 0xf5, 0x2c, 0xe2, 0x3c, 0x8a, 0xb1, 0xab, 0xc2, 0xd9, 0x6a,
	0xde, 0x15, 0x74, 0x89, 0x99, 0xf0, 0x97, 0x49, 0x41, 0x34, 0xc7, 0xa0, 0x0f, 0x36, 0xb9, 0xae,
	0x4d, 0x08, 0x54, 0x12, 0x5f, 0x2c, 0x9a, 0x5a, 0x5b, 0xeb, 0x1c, 0x7a, 0xea, 0x2c, 0x31, 0xe6,
	0x2f, 0xb1, 0x59, 0x2a, 0x30, 0x79, 0x26, 0x4d, 0xd8, 0xcf, 0x31, 0xcd, 0x28, 0x67, 0xcd, 0xb2,
	0x82, 0x37, 0xa1, 0xf9, 0x5d, 0x83, 0xfa, 0x5d, 0x45, 0x96, 0xac, 0x84, 0x2c, 0xe0, 0xa7, 0x51,
	0xd6, 0xd4, 0xda, 0xe5, 0x4e, 0xd5, 0x53, 0x67, 0xe2, 0x82, 0x1e, 0x62, 0xc0, 0x53, 0x5f, 0x50,
	0xce, 0xb2, 0x66, 0xa9, 0x5d, 0xee, 0xe8, 0xbd, 0x17, 0xc5, 0x50, 0x99, 0xf5, 0xb0, 0x80, 0x65,
	0xdf, 0x31, 0x1d, 0x26, 0xd2, 0xb5, 0x77, 0x3f, 0xb7, 0x75, 0x02, 0xc6, 0xef, 0x04, 0x62, 0x40,
	0xf9, 0x1a, 0xd7, 0xb7, 0x32, 0xe4, 0x91, 0x34, 0x60, 0x37, 0xf7, 0xe3, 0x55, 0x21, 0xa3, 0xea,
	0x15, 0xc1, 0xbb, 0xd2, 0x5b, 0xcd, 0xfc, 0xa9, 0x41, 0x6d, 0xdb, 0xf0, 0x32, 0xc1, 0x80, 0x58,
	0x50, 0x11, 0xeb, 0x04, 0x55, 0x7a, 0xbd, 0xd7, 0x7a, 0x34, 0x95, 0x24, 0x59, 0x93, 0x75, 0x82,
	0x9e, 0xe2, 0x91, 0x37, 0x50, 0xdd, 0x5e, 0xc0, 0x94, 0x86, 0xaa, 0x85, 0xde, 0xfb, 0xe7, 0xb1,
	0x1a, 0xdb, 0xd3, 0xb7, 0x44, 0x37, 0x24, 0xaf, 0x60, 0x97, 0x4a, 0x81, 0xca, 0x43, 0xbd, 0xf7,
	0xdf, 0xd3, 0xf2, 0xbd, 0x82, 0x24, 0x3d, 0x97, 0xb7, 0xc7, 0x57, 0xa2, 0x59, 0x69, 0x6b, 0x9d,
	0x5d, 0x6f, 0x13, 0x9a, 0x27, 0x50, 0x91, 0xd3, 0x90, 0x1a, 0x1c, 0x5e, 0x8d, 0x6c, 0xe7, 0xcc,
	0x1d, 0x39, 0xb6, 0xb1, 0x43, 0x00, 0xf6, 0xce, 0xc7, 0xc3, 0xfe, 0xe8, 0xdc, 0xd0, 0xc8, 0x01,
	0x54, 0x46, 0x63, 0xdb, 0x31, 0x4a, 0x64, 0x1f, 0xca, 0x83, 0xbe, 0x67, 0x94, 0x25, 0xf4, 0xa1,
	0xff, 0xb9, 0x6f, 0x54, 0xcc, 0x1f, 0x25, 0xf8, 0x7f, 0xdb, 0xd3, 0xc6, 0x24, 0xe6, 0xeb, 0x25,
	0x32, 0xa1, 0xbc, 0x78, 0x0f, 0xf5, 0x3b, 0x6d, 0x59, 0x82, 0x81, 0x72, 0x45, 0xef, 0xfd, 0xfb,
	0xa4, 0x2b, 0x5e, 0x2d, 0x78, 0xe0, 0x64, 0x1f, 0xea, 0x38, 0x9f, 0x63, 0x20, 0x68, 0x8e, 0xd3,
	0xd0, 0x17, 0x78, 0xeb, 0x4d, 0xcb, 0x2a, 0x16, 0xd3, 0xda, 0x2c, 0xa6, 0x35, 0xd9, 0x2c, 0xa6,
	0x57, 0xdb, 0x66, 0xd8, 0xbe, 0x40, 0xf2, 0x1c, 0xaa, 0xaa, 0x77, 0xe2, 0x07, 0xd7, 0x7e, 0x84,
	0xca, 0xab, 0xaa, 0xa7, 0x4b, 0xec, 0xa2, 0x80, 0xc8, 0x18, 0x0e, 0xf0, 0x06, 0x83, 0x29, 0xb2,
	0x5c, 0x59, 0x53, 0xef, 0x1d, 0x3f, 0x9a, 0xee, 0xa1, 0x2c, 0xcb, 0xb9, 0xc1, 0x60, 0x25, 0x17,
	0xc6, 0x61, 0x39, 0x4d, 0x39, 0x93, 0x7f, 0x78, 0xfb, 0xb2, 0x8a, 0xc3, 0x72, 0xd3, 0x82, 0xc6,
	0x53, 0x04, 0xe9, 0xa8, 0x3d, 0x1e, 0x7c, 0x74, 0xbc, 0xc2, 0xdd, 0xcb, 0x2f, 0x97, 0x13, 0xe7,
	0x93, 0xa1, 0x99, 0xdf, 0xb4, 0x7b, 0x06, 0xba, 0x2c, 0xe7, 0x81, 0x5a, 0xc6, 0x3f, 0x60, 0xe0,
	0x11, 0xfc, 0x4d, 0xc3, 0x69, 0x84, 0x0c, 0x8b, 0xfd, 0x9e, 0xfa, 0x71, 0x74, 0xfb, 0x25, 0xfe,
	0x45, 0xc3, 0xf3, 0x2d, 0xde, 0x8f, 0xa3, 0xa3, 0x63, 0x68, 0x0c, 0x38, 0x9b, 0xd3, 0x10, 0x99,
	0xa0, 0x7e, 0x4c, 0xc5, 0x7a, 0x88, 0x39, 0xc6, 0x72, 0xd2, 0x8b, 0xab, 0xd3, 0xa1, 0x3b, 0x30,
	0x76, 0x88, 0x01, 0xd5, 0xc1, 0x78, 0x74, 0xe6, 0xda, 0xce, 0x68, 0xe2, 0xf6, 0x87, 0x86, 0x76,
	0x3a, 0x06, 0x93, 0xa7, 0x91, 0xb5, 0x58, 0x27, 0x98, 0xc6, 0x18, 0x46, 0x98, 0x5a, 0x73, 0x7f,
	0x96, 0xd2, 0x60, 0x33, 0x9f, 0x7c, 0x60, 0xbe, 0xbe, 0x8c, 0xa8, 0x58, 0xac, 0x66, 0x56, 0xc0,
	0x97, 0xdd, 0x7b, 0xd4, 0x6e, 0x41, 0x2d, 0xde, 0x97, 0xac, 0x2b, 0xa9, 0xb3, 0xe2, 0xed, 0x79,
	0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x66, 0x39, 0xf9, 0x9a, 0x04, 0x00, 0x00,
}
